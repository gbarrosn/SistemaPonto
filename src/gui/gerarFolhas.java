/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.table.DefaultTableModel;

import db.dadosRegistroMensal;
import model.*;

import org.apache.commons.compress.utils.IOUtils;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.util.Units;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import model.MergedRegionUtils.*;

//importando lib do barcode
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import java.awt.image.BufferedImage;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

/**
 *
 * @author gbarrosn
 */
public class gerarFolhas extends javax.swing.JFrame {
    List<registro> registros = null;
    List<registroMensal> registrosMesSelecionado = new ArrayList<registroMensal>();
    /**
     * Creates new form gerarFolhas
     */
    public gerarFolhas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBoxMes = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Tela Inicial");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Assinatura", "Assinatura Coordenação", "Mês"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBoxMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        jComboBoxMes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxMesMouseClicked(evt);
            }
        });
        jComboBoxMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMesActionPerformed(evt);
            }
        });

        jButton2.setText("Atualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/GovPERGBpequeno1.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Gerar folhas de Ponto");

        jButton3.setText("Gerar Folhas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(314, 314, 314)
                                .addComponent(jComboBoxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        telaInicial tela = new telaInicial();
        tela.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxMesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxMesMouseClicked

        //jComboBoxMesActionPerformed(null);
    }//GEN-LAST:event_jComboBoxMesMouseClicked

    private void jComboBoxMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMesActionPerformed

        int mes = jComboBoxMes.getSelectedIndex() + 1;
        registrosMesSelecionado = dadosRegistroMensal.buscarDadosDoMes(mes);

        List<String> nomes = new ArrayList<String>();
        for (registroMensal r : registrosMesSelecionado) {
            if (!nomes.contains(r.getFuncionario().getNome())) {
                nomes.add(r.getFuncionario().getNome());
            }
        }
        System.out.println(nomes);
        

    }//GEN-LAST:event_jComboBoxMesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int mes = jComboBoxMes.getSelectedIndex() + 1;
        registrosMesSelecionado = dadosRegistroMensal.buscarDadosDoMes(mes);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (registroMensal r : registrosMesSelecionado) {
            boolean isDuplicate = false;
            for (int i = 0; i < model.getRowCount(); i++) {
            String nome = (String) model.getValueAt(i, 0);
            if (nome.equals(r.getFuncionario().getNome())) {
                isDuplicate = true;
                break;
            }
            }
            if (!isDuplicate) {
            String assinatura = r.getAssinatura() != null ? "Assinado em: " + r.getAssinatura().getDataAssinatura() + " " + r.getAssinatura().getHoraAssinatura() : "Assinatura não registrada";
            String assinaturaCoordenacao = r.getAssinaturaCoordenacao() != null ? "Assinado pela Coordenação em: " + r.getAssinaturaCoordenacao().getDataAssinatura() + " " + r.getAssinaturaCoordenacao().getHoraAssinatura() : "Assinatura não registrada";
            String mesS = r.getAssinatura() != null ? String.valueOf(r.getAssinatura().getMes()) : "Não assinado";
            model.addRow(new Object[]{r.getFuncionario().getNome(), assinatura, assinaturaCoordenacao, mesS});
            }
        }
        

        

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here: gerar as folhas de ponto

        for (registroMensal r : registrosMesSelecionado) {
            try {
                gerarFolhaPontoTerceirizado(r);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void gerarFolhaPontoTerceirizado(registroMensal registro) throws FileNotFoundException, IOException {
        
        try (Workbook workbook = new XSSFWorkbook(new FileInputStream("Tabela ponto.xlsx"))) {
            
            Sheet sheet = workbook.getSheetAt(0);

            // Criar imagem do código de barras e inserir na planilha
            createBarcode(String.valueOf(registro.getFuncionario().getIdFuncionario()), registro.getFuncionario().getCodigoDeBarras());
            FileInputStream barcode = new FileInputStream("." + File.separator + "barcodes" + File.separator + String.valueOf(registro.getFuncionario().getIdFuncionario()) + ".png");
            byte[] bytes = IOUtils.toByteArray(barcode);
            int pictureIdx = workbook.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);
            barcode.close();

            CreationHelper helper = workbook.getCreationHelper();
            Drawing<?> drawing = sheet.createDrawingPatriarch();
            ClientAnchor anchor = helper.createClientAnchor();
            anchor.setCol1(5);
            anchor.setCol2(8);

            anchor.setRow1(0);
            anchor.setRow2(1);


            anchor.setDy1(Units.toEMU(2)); // Set the top offset to 2 millimeters
            anchor.setDy2(Units.toEMU(2)); // Set the bottom offset to 2 millimeters
            Picture pict = drawing.createPicture(anchor, pictureIdx);

            pict.resize(1, 0.7);
            

            // Preencher cabeçalho

            // Nome
            Row nome = sheet.getRow(1);
            nome.getCell(0).setCellValue("Nome: " + registro.getFuncionario().getNome()); // funciona

            // Matrícula
            nome.getCell(6).setCellValue("Matrícula: " + String.valueOf(registro.getFuncionario().getMatricula())); //funciona

            // Lotação
            Row lotacao = sheet.getRow(2);
            lotacao.getCell(0).setCellValue("Setor: " + registro.getFuncionario().getSetor());

            // mes atual
            lotacao.getCell(6).setCellValue("Mês: " + numeroMesToNome(registro.getRegistros().get(0).getMes()) + " de " + registro.getRegistros().get(0).getData().split("/")[2]); // funciona

            // Função
            Row funcao = sheet.getRow(3);
            funcao.getCell(0).setCellValue("Função: " + registro.getFuncionario().getFuncao());

            // Data de admissão
            funcao.getCell(6).setCellValue("Data de admissão: " + registro.getFuncionario().getDataAdmissao()); // funbciona

            // Escala
            Row escala = sheet.getRow(4);
            escala.getCell(0).setCellValue("Escala: " + registro.getFuncionario().getEscala());
            
            // Carga horária
            escala.getCell(6).setCellValue("Carga horária: " + registro.getFuncionario().getHorasSemanais() + "h semanais."); // funciona
            
            // Preencher a tabela de ponto

            // listar os dias do mês com o nome da semana
            //System.out.println("Data: " + registro.getRegistros().get(0).getData() + " Dia: " + registro.getRegistros().get(0).dataToDia(registro.getRegistros().get(0).getData()));

            /*Row dia1 = sheet.getRow(7);
            dia1.getCell(0).setCellValue(registro.getRegistros().get(0).getData());
            dia1.getCell(1).setCellValue(registro.getRegistros().get(0).dataToDia(registro.getRegistros().get(0).getData()));*/

            List<String> datas = new ArrayList<String>();
            int dia = 1;
            while (dia <= 31) {
                String data = "";
                if (dia < 10) {
                    data = "0" + String.valueOf(dia) + "/0" + String.valueOf(registro.getRegistros().get(0).getMes()) + "/" + String.valueOf(registro.getRegistros().get(0).getData().split("/")[2]);
                } else {
                    data = String.valueOf(dia) + "/0" + String.valueOf(registro.getRegistros().get(0).getMes()) + "/" + String.valueOf(registro.getRegistros().get(0).getData().split("/")[2]);
                }
                dia += 1;
                datas.add(data);
            }

            

            int linha = 7;
            for (String data : datas) {
                Row linhaDia = sheet.getRow(linha);

                for (registro r : registro.getRegistros()) {
                    if (r.getData().equals(data)) {
                        linhaDia.getCell(2).setCellValue(r.getHoraEntrada());
                        linhaDia.getCell(3).setCellValue(r.getSaidaAlmoco());
                        linhaDia.getCell(4).setCellValue(r.getRetornoAlmoco());
                        linhaDia.getCell(5).setCellValue(r.getHoraSaida());
                        break;
                    }
                }
                linhaDia.getCell(1).setCellValue(registro.getRegistros().get(0).dataToDia(data));
                linha += 1;
            }



            // criar excel para o libreoffice converter para pdf
            try (FileOutputStream outputStream = new FileOutputStream("folhas" + File.separator + "Folha de ponto " + registro.getFuncionario().getNome() + ".xlsx")) {
                workbook.write(outputStream);
            }

            String caminho = "folhas" + File.separator + "Folha de ponto " + registro.getFuncionario().getNome() + ".xlsx";
            caminho = caminho.replace("\\ ", "");

            converterExcelParaPdf(caminho);
          
            workbook.close();


        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static void createBarcode(String imageName, String myString) {

        try {

            Code128Bean code128 = new Code128Bean();
            code128.setHeight(15f);
            code128.setModuleWidth(0.3);
            code128.setQuietZone(10);
            code128.doQuietZone(true);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            BitmapCanvasProvider canvas = new BitmapCanvasProvider(baos, "image/x-png", 300, BufferedImage.TYPE_BYTE_BINARY, false, 0);
            code128.generateBarcode(canvas, myString);
            canvas.finish();

            FileOutputStream fos = new FileOutputStream("." + File.separator + "barcodes" + File.separator + imageName + ".png");
            fos.write(baos.toByteArray());
            fos.flush();
            fos.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void converterExcelParaPdf(String caminho) {

        // Construindo o comando com ProcessBuilder
        ProcessBuilder builder = new ProcessBuilder(
            "libreoffice", "--headless", "--convert-to", "pdf", "--outdir", "folhas", caminho
        );

        try {
            // Iniciando o processo
            Process process = builder.start();

            // Lendo a saída do processo (opcional)
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);  

            }

            // Aguardando o término do processo
            int exitCode = process.waitFor();

            // Verificando o código de saída
            if (exitCode == 0) {
                System.out.println("Conversão realizada com sucesso!");
            } else {
                System.err.println("Erro ao converter o arquivo. Código de saída: " + exitCode);
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }


    }

    public static String numeroMesToNome(int mes) {
        List<String> meses = new ArrayList<String>();
        meses.add("Janeiro");
        meses.add("Fevereiro");
        meses.add("Março");
        meses.add("Abril");
        meses.add("Maio");
        meses.add("Junho");
        meses.add("Julho");
        meses.add("Agosto");
        meses.add("Setembro");
        meses.add("Outubro");
        meses.add("Novembro");
        meses.add("Dezembro");

        return meses.get(mes-1);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gerarFolhas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gerarFolhas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gerarFolhas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gerarFolhas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gerarFolhas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBoxMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
